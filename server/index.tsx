require("dotenv").config();
import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import path from "path";

var SpotifyWebApi = require("spotify-web-api-node");

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.resolve(__dirname, "../client/build")));
app.use(cors());

const port = process.env.PORT;
const endpoint = process.env.SPOTIFY_ENDPOINT;
const wordnikApi = process.env.WORDNIK_API;

app.get("/", async (req, res) => {
  let word: string = req.body;

  let spotifyApi = new SpotifyWebApi({
    clientId: process.env.SPOTIFY_ID,
    clientSecret: process.env.SPOTIFY_SECRET
  });
  spotifyApi
    .clientCredentialsGrant() // Creates client-side credentials using spotify-web-api-node
    .then(async function (data: { body: { [x: string]: string } }) {
      // This grabs the access token generated by the previous function and sets the access token
      const accessToken = data.body[""]; // in the previously created credential object 'spotifyApi'; it then searches for songs
      console.log("the access token is " + data.body["access_token"]); // using the searchTracks function and returns only 1 song to save on response time.
      spotifyApi.setAccessToken(data.body["access_token"]);

      return spotifyApi.searchTracks("Leave", { limit: 1 });
    })
    .then(function (data: any) {
      var uriTrack = data.body["tracks"]["items"][0]["name"];
      var uriArtist = data.body["tracks"]["items"][0]["artists"][0]["name"];
      var uriCover =
        data.body["tracks"]["items"][0]["album"]["images"][0]["url"];
      var uriLink = data.body["tracks"]["items"][0]["external_urls"]["spotify"];
      console.log(
        uriTrack + " by " + uriArtist + " album cover link: " + uriCover
      );

      res.json({
        songName: uriTrack,
        songArtist: uriArtist,
        songAlbum: uriCover,
        songLink: uriLink
      });
    });
});
app.listen(port, () => console.log(`App listening on port ${port}!`));
